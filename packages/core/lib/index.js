(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["core"] = factory();
	else
		root["core"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it uses a non-standard name for the exports (exports).
(() => {
var exports = __webpack_exports__;
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MagicJson = void 0;
exports.getJSONType = getJSONType;
exports.isEmptyObject = isEmptyObject;
exports.getEmptyStats = getEmptyStats;
exports.deconstructMetaJSON = deconstructMetaJSON;
exports.constructMetaJSON = constructMetaJSON;
function getJSONType(json) {
    const type = typeof json;
    if (type === 'object' && Array.isArray(json)) {
        return 'array';
    }
    return type + '';
}
function isEmptyObject(object) {
    return Boolean(object) && typeof object === 'object' && Object.keys(object).length === 0;
}
function getEmptyStats() {
    return ({
        cols: {},
        fields: {},
        types: {},
    });
}
function deconstructMetaJSON(json) {
    if (typeof json !== 'object') {
        return json;
    }
    const { key, value, type, depth, path } = json;
    if (type === 'arraycell') {
        if (typeof value === 'object') {
            const arrayCellResults = value.reduce((acc, entry) => {
                acc[entry.key] = deconstructMetaJSON(entry);
                return acc;
            }, {});
            return arrayCellResults;
        }
        return value;
    }
    if (type === 'object') {
        return value.reduce((acc, entry) => {
            if (entry.type === 'array') {
                acc[entry.key] = entry.value.map((innerEntry) => {
                    return deconstructMetaJSON(innerEntry);
                });
            }
            else if (entry.type === 'object') {
                acc[entry.key] = entry.value.reduce((acc, innerEntry) => {
                    acc[innerEntry.key] = deconstructMetaJSON(innerEntry);
                    return acc;
                }, {});
            }
            else {
                acc[entry.key] = entry.value;
            }
            return acc;
        }, {});
    }
    else {
        return value;
    }
}
function constructMetaJSON(json, depth = 0, stats = getEmptyStats(), path = '') {
    const type = getJSONType(json);
    if (path === '') {
        return {
            depth,
            key: '_root',
            path: '',
            value: constructMetaJSON(json, depth + 1, stats, '/'),
            type,
        };
    }
    if (!json || (type !== 'object' && type !== 'array') || isEmptyObject(json)) {
        return json;
    }
    if (type === 'array') {
        return json.map((entry, index) => {
            const nextPath = `${path}${index}/`;
            return {
                depth,
                key: index + '',
                path: nextPath,
                value: constructMetaJSON(entry, depth, stats, nextPath),
                type: 'arraycell'
            };
            return constructMetaJSON(entry, depth + 1, stats, nextPath);
        });
    }
    if (type === 'object') {
        const keys = Object.keys(json);
        return keys.map((key) => {
            const nextPath = `${path}${key}/`;
            return {
                depth,
                key,
                path: nextPath,
                type: getJSONType(json[key]),
                value: constructMetaJSON(json[key], depth + 1, stats, nextPath),
            };
        });
    }
}
class MagicJson {
    constructor(json) {
        this.doMagic(json);
    }
    doMagic(json) {
        this.json = json;
        this.jsonMeta = constructMetaJSON(json);
        this.stats = this.jsonMeta.__stats;
    }
}
exports.MagicJson = MagicJson;
MagicJson.constructJSONMeta = (json) => constructMetaJSON(json);

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,